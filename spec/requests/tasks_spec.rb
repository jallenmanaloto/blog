 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Tasks", type: :request do
  before(:example) do
    @category = Category.create(name: 'test')
    @task = Task.create(body: 'testing')
  end
  
   describe "GET index of tasks" do
    it "renders a successful response" do
      get category_tasks_path(@category.id)

      expect(response).to have_http_status(200)
    end
  end

  # describe "Get individual tasks" do
  #   it "displays description of the task" do
      
  #     puts @category.id
  #     puts @category.first.body
      
  #     get category_task_path(@category.id, @task.id)
      
  #     expect(response).to have_http_status(200)
  #   end
  # end

  describe "GET new method" do
    it "directs to new task" do
      get new_category_task_path(@category.id)
      expect(response).to have_http_status(200)
    end
  end

  # describe "GET /edit" do
  #   it "render a successful response" do
  #     task = Task.create! valid_attributes
  #     get edit_task_url(task)
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create" do
    it "creates a new Task" do
      expect {
        post category_tasks_path(@category.id), params: { task: { body: @task.body } }
      }.to change(Task, :count).by(+1)
    end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested task" do
  #       task = Task.create! valid_attributes
  #       patch task_url(task), params: { task: new_attributes }
  #       task.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "redirects to the task" do
  #       task = Task.create! valid_attributes
  #       patch task_url(task), params: { task: new_attributes }
  #       task.reload
  #       expect(response).to redirect_to(task_url(task))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       task = Task.create! valid_attributes
  #       patch task_url(task), params: { task: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested task" do
  #     task = Task.create! valid_attributes
  #     expect {
  #       delete task_url(task)
  #     }.to change(Task, :count).by(-1)
  #   end

  #   it "redirects to the tasks list" do
  #     task = Task.create! valid_attributes
  #     delete task_url(task)
  #     expect(response).to redirect_to(tasks_url)
  #   end
  # end
end
